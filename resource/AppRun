#!/bin/bash -e
TMP_GLIBC_COPY="/tmp/.ff11_tmp_copy_appimage_ubuntu_bionic_glibc_i386_v0001"
HERE="$(dirname "$(readlink -f "${0}")")"
BASE_X86_LIB_PATH="${HERE}/usr/lib/i386-linux-gnu"
BASE_X64_LIB_PATH="${HERE}/usr/lib/x86_64-linux-gnu"
F11_APPIMAGE_TMP_DIR="${HERE}_tmp"
F11_APPIMAGE_CONF_DIR="${HOME}/.config/f11conf"
F11_APPIMAGE_VKCONF="${F11_APPIMAGE_CONF_DIR}/vulkan.conf"

# just for tmp glibc copy after remove the old:
rm -rf "${TMP_GLIBC_COPY}"
cp -r "${HERE}/lib/i386-linux-gnu" "${TMP_GLIBC_COPY}"
#===================================================================

# If not extract and overwrite, ${HERE}/lib is a link to ${HERE}/usr/lib, that link to ${HERE}/usr/lib64
export LD_LIBRARY_PATH="${BASE_X64_LIB_PATH}:${LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH="${BASE_X86_LIB_PATH}:${LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH="${HERE}/lib:${LD_LIBRARY_PATH}"

export PATH="${HERE}/bin:${HERE}/usr/bin:${PATH}"

#ubuntu extra:
export LD_LIBRARY_PATH="${HERE}/lib/i386-linux-gnu:${LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH="${HERE}/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
#----------------------------------------
#===================================================================

##Wine ENVs (see: https://wiki.winehq.org/Wine-Staging_Environment_Variables)

if [[ "${BINARY_NAME}" == "wine" ]]; then
	export WINE="${INSTALL_DIR}/bin/wine"
	export WINELOADER="${WINE}"
else
	export WINE="${INSTALL_DIR}/bin/wine64"
	export WINELOADER="${WINE}"
fi

#export WINEVERPATH="${WINEVERPATH:-"${HERE}"}"
export WINEVERPATH="${HERE}"
export WINESERVER="${HERE}/bin/wineserver"
#export WINEPATH="${HERE}/bin:${HERE}/lib64/wine:${HERE}/lib/wine:${WINEPATH}"
#export WINEDLLPATH="${HERE}/lib64/wine/fakedlls:${HERE}/lib/wine/fakedlls:${WINEDLLPATH}"
#export WINEDEBUG="${WINEDEBUG:-"-all"}"
#export WINEDEBUG=fixme-all
#export WINEDLLOVERRIDES="${WINEDLLOVERRIDES:-"mscoree,mshtml="}"
#export WINEESYNC=0
#export WINEESYNC="${WINEESYNC:-"1"}"

#export LD_LIBRARY_PATH="${HERE}/lib64/wine:${HERE}/lib/wine:${LD_LIBRARY_PATH}"
#----------------------------------------

# Load winecfg if no arguments given
APPLICATION=""
if [ -z "${*}" ] ; then
	APPLICATION="winecfg"
fi

# Allow the AppImage to be symlinked to e.g., /usr/bin/wineserver
if [ -n "${APPIMAGE}" ] ; then
	BINARY_NAME="$(basename "${ARGV0}")"
else
	BINARY_NAME="$(basename "${0}")"
fi

# change some scripts to exe executables
if [[ "${1}" =~ ^(winecfg|wineboot|regedit|regsvr32|msiexec|msidb|notepad|winefile|winemine)$ ]]; then
	args=( "${@}" )
	args[0]="${1}.exe"
	set "${args[@]}"
fi

if [ -n "${1}" ] && [ -x "${HERE}/bin/${1}" ] ; then
	MAIN="${HERE}/bin/${1}" ; shift
elif [ -n "${1}" ] && [ -x "${HERE}/usr/bin/${1}" ] ; then
	MAIN="${HERE}/usr/bin/${1}" ; shift
elif [ -x "${HERE}/bin/${BINARY_NAME}" ] ; then
	MAIN="${HERE}/bin/${BINARY_NAME}"
elif [ -x "${HERE}/usr/bin/${BINARY_NAME}" ] ; then
	MAIN="${HERE}/usr/bin/${BINARY_NAME}"
elif [ -x "${HERE}/bin/wine64" ] ; then
	MAIN="${HERE}/bin/wine64"
else
	MAIN="${HERE}/bin/wine"
fi

# Exec outside apps with inside environment (make the link name "ExternalExec")
if [ "${BINARY_NAME}" = "ExternalExec" ] && [ -n "${1}" ] && [ -x "${1}" ]; then
	MAIN="${1}" ; shift
fi
#===================================================================

if [ -z "${APPLICATION}" ] ; then
	"${MAIN}" "${@}" | cat
else
	"${MAIN}" "${APPLICATION}" | cat
fi
